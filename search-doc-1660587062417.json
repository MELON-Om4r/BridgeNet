[{"title":"BridgeNet","type":0,"sectionRef":"#","url":"api/BridgeNet","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#functions","content":" "},{"title":"CreateBridge​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#CreateBridge","content":"&lt;/&gt; BridgeNet.CreateBridge(remoteName: string) → ServerBridge | ClientBridge Creates a ServerBridge or a ClientBridge depending on if it's the server or client calling. If a Bridge of that name already exists, it'll return that Bridge object. This can be used to fetch bridges, but .WaitForBridge is recommended. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;)   "},{"title":"WaitForBridge​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#WaitForBridge","content":"&lt;/&gt; BridgeNet.WaitForBridge() → BridgeObject Waits for a BridgeObject to be created, then resumes the thread. This does NOT replicate. If the server creates a BridgeObject, it will NOT replicate to the client. This will wait until a BridgeObject is created for the client/server respectively. print(&quot;client is waiting for the bridge to be created on the client..&quot;) local Bridge = BridgeNet.WaitForBridge(&quot;Remote&quot;) print(&quot;client is done waiting! was created in another script.&quot;)   "},{"title":"Start​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#Start","content":"&lt;/&gt; BridgeNet.Start(options: {}) → nil This function starts BridgeNet. It must be called on both the client and server. All possible parameters: - DefaultReceive (BridgeNet.DefaultReceive) sets the rate of which incoming data is handled. Defaults to 60 hz - DefaultSend (BridgeNet.DefaultSend) sets the rate of which outgoing data is sent. Defaults to 60 hz - SendLogFunction (BridgeNet.SendLogFunction) sets the custom logging function for all outgoing data. Default is none [UNSTABLE] - ReceiveLogFunction (BridgeNet.ReceiveLogFunction) sets the custom logging function for all incoming data. Default is none [UNSTABLE] BridgeNet.Start({ -- server [BridgeNet.DefaultReceive] = 60, [BridgeNet.DefaultSend] = 60, [SendLogFunction] = function(remote, plrs, ...) local args = table.pack(...) print(remote, plrs, args) end, [ReceiveLogFunction] = function(remote, plr, ...) print(remote, plr, args) end, })  "},{"title":"ServerBridge","type":0,"sectionRef":"#","url":"api/ServerBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#functions","content":" "},{"title":"FireTo​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireTo","content":"&lt;/&gt; ServerBridge:FireTo( plr: Player , ...: ...any ) → nil Sends data to a specific player. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireTo(Players.Someone, &quot;Hello&quot;, &quot;World!&quot;)   "},{"title":"FireToAllExcept​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireToAllExcept","content":"&lt;/&gt; ServerBridge:FireToAllExcept( blacklistedPlrs: Player | {Player }, ...: ...any ) → nil Sends data to every player except for one. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireToAllExcept(Players.Someone, &quot;Hello&quot;, &quot;World!&quot;) Bridge:FireToAllExcept({Players.A, Players.B}, &quot;Not to A or B, but to C.&quot;)   "},{"title":"FireAllInRangeExcept​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAllInRangeExcept","content":"&lt;/&gt; ServerBridge:FireAllInRangeExcept( blacklistedPlrs: Player | {Player }, point: Vector3 , range: number, ...: ...any ) → {Player } Sends data to every single player within the range except certain blacklisted players. Returns the players affected, for usage later. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) local PlayersSent = Bridge:FireToAllInRangeExcept( Players.Someone, Vector3.new(50, 50, 50), 10, &quot;Hello&quot;, &quot;World!&quot; ) task.wait(5) Bridge:FireToMultiple(PlayersSent, &quot;Time for an update!&quot;)   "},{"title":"FireAllInRange​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAllInRange","content":"&lt;/&gt; ServerBridge:FireAllInRange( point: Vector3 , range: number, ...: ...any ) → {Player } Sends data to every single player within the range. Returns the players affected, for usage later. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) local PlayersSent = Bridge:FireAllInRange( Vector3.new(50, 50, 50), 10, &quot;Hello&quot;, &quot;World!&quot; ) task.wait(5) Bridge:FireToMultiple(PlayersSent, &quot;Time for an update!&quot;)   "},{"title":"FireAll​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAll","content":"&lt;/&gt; ServerBridge:FireAll(...: ...any) → nil Sends data to every single player, with no exceptions. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireAll(&quot;Hello, world!&quot;)   "},{"title":"FireToMultiple​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireToMultiple","content":"&lt;/&gt; ServerBridge:FireToMultiple( plrs: {Player }, ...: ...any ) → nil Sends data to multiple players. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireToMultiple({Players.A, Players.B}, &quot;Hi!&quot;, &quot;Hello.&quot;)   "},{"title":"Connect​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Connect","content":"&lt;/&gt; ServerBridge:Connect(func: ( plr: Player , ...any ) → nil) → Connection Creates a connection. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:Connect(function(plr, data) print(plr .. &quot; has sent &quot; .. data) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Destroy","content":"&lt;/&gt; ServerBridge:Destroy() → nil Destroys the identifier, and deletes the object reference. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:Destroy() Bridge:FireTo(Players.A) -- Errors, the object is deleted.  "},{"title":"serdeLayer","type":0,"sectionRef":"#","url":"api/serdeLayer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#functions","content":" "},{"title":"WhatIsThis​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#WhatIsThis","content":"&lt;/&gt; serdeLayer.WhatIsThis( str: string, toSend: &quot;id&quot; | &quot;compressed&quot; ) → string? Takes a compressed value and returns the identification related to it, and does the reverse. print(BridgeNet.WhatIsThis(&quot;SomeIdentificationStringHere&quot;)) -- prints the compressed value   "},{"title":"CreateIdentifier​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#CreateIdentifier","content":"&lt;/&gt; serdeLayer.CreateIdentifier(id: string) → string Creates an identifier and associates it with a compressed value. This is shared between the server and the client. If the identifier already exists, it will be returned. BridgeNet.CreateIdentifier(&quot;Something&quot;) print(BridgeNet.WhatIsThis(&quot;Something&quot;, &quot;compressed&quot;))   "},{"title":"DestroyIdentifier​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#DestroyIdentifier","content":"&lt;/&gt; serdeLayer.DestroyIdentifier(id: string) → nil Creates an identifier and associates it with a compressed value. This is shared between the server and the client. BridgeNet.DestroyIdentifier(&quot;Something&quot;) print(BridgeNet.WhatIsThis(&quot;Something&quot;, &quot;compressed&quot;)) -- Errors   "},{"title":"CreateUUID​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#CreateUUID","content":"&lt;/&gt; serdeLayer.CreateUUID() → string Creates a UUID. print(BridgeNet.CreateUUID()) -- Prints 93179AF839C94B9C975DB1B4A4352D75   "},{"title":"PackUUID​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#PackUUID","content":"&lt;/&gt; serdeLayer.PackUUID(uuid: string) → string Packs a UUID in hexadecimal form into a string, which can be sent over network as smaller. print(BridgeNet.PackUUID(BridgeNet.CreateUUID())) -- prints something like �#F}ЉF��\\�rY�*   "},{"title":"UnpackUUID​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#UnpackUUID","content":"&lt;/&gt; serdeLayer.UnpackUUID(uuid: string) → string Takes a packed UUID and convetrs it into hexadecimal/readable form print(BridgeNet.UnpackUUID(somePackedUUID)) -- Prints 93179AF839C94B9C975DB1B4A4352D75   "},{"title":"DictionaryToTable​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#DictionaryToTable","content":"&lt;/&gt; serdeLayer.DictionaryToTable(dict: {[string]: any}) → string Alphabetically sorts a dictionary and turns it into a table. Useful because string keys are typically unnecessary when sending things over the wire. Please note: This doesn't play too nicely with special characters. print(BridgeNet.DictionaryToTable({ alpha = 999, bravo = 1000, charlie = 1001, delta = 1002 })) -- prints {999,1000,1001,1002}  "},{"title":"Client-Server Example","type":0,"sectionRef":"#","url":"docs/Client-Server Example","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Client-Server Example","url":"docs/Client-Server Example#server","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) BridgeNet.Start({}) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) Remote:Connect(function(plr, stringA, stringB) print(stringA .. stringB) -- Prints &quot;Hello, server!&quot; end)  "},{"title":"Client​","type":1,"pageTitle":"Client-Server Example","url":"docs/Client-Server Example#client","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) BridgeNet.Start({}) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) while true do Remote:Fire(&quot;Hello, &quot;, &quot;server!&quot;) task.wait(1) end  "},{"title":"ClientBridge","type":0,"sectionRef":"#","url":"api/ClientBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Fire","content":"&lt;/&gt; ClientBridge:Fire(...: any) → () The equivalent of :FireServer(). local Bridge = ClientBridge.new(&quot;Remote&quot;) Bridge:Fire(&quot;Hello&quot;, &quot;world!&quot;)   "},{"title":"Connect​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Connect","content":"&lt;/&gt; ClientBridge:Connect(func: function) → nil Creates a connection. Can be disconnected using :Disconnect(). local Bridge = ClientBridge.new(&quot;Remote&quot;) Bridge:Connect(function(text) print(text) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Destroy","content":"&lt;/&gt; ClientBridge:Destroy() → nil Destroys the ClientBridge object. Doesn't destroy the RemoteEvent, or destroy the identifier. It doesn't send anything to the server. Just destroys the client sided object. local Bridge = ClientBridge.new(&quot;Remote&quot;) ClientBridge:Destroy() ClientBridge:Fire() -- Errors  "},{"title":"RateManager","type":0,"sectionRef":"#","url":"api/RateManager","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RateManager","url":"api/RateManager#functions","content":" "},{"title":"SetReceiveRate​","type":1,"pageTitle":"RateManager","url":"api/RateManager#SetReceiveRate","content":"&lt;/&gt; RateManager.SetReceiveRate(rate: number) → nil Sets the rate (in Hz) of which connections are executed RateManager.SetReceiveRate(30) -- Do connections at 30 fps   "},{"title":"SetSendRate​","type":1,"pageTitle":"RateManager","url":"api/RateManager#SetSendRate","content":"&lt;/&gt; RateManager.SetSendRate(rate: number) → nil Sets the rate (in Hz) of which remotes are fired RateManager.SetSendRate(30) -- Do connections at 30 fps  "},{"title":"BridgeNet","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#features","content":"A multitude of utility functions such as :FireAllInRange(), :FireAllExcept, and :FireAllInRangeExcept.Directly cutting down the amount of data it takes to call a remote eventEasy-to-use, dynamic serialization/deserialization layerDynamic send/receive ratesDynamically creating RemoteEvents while keeping all the above features "},{"title":"Upcoming features (order = priority)​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#upcoming-features-order--priority","content":"Support for rate limiting and middlewareTypecheckingEasy logging supportRemoteFunction-esque functions (this would support promises)Using attributes instead of value objects "},{"title":"Prior art​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#prior-art","content":"RbxNetThis is a continuation of my previous networking system NetworkObjectThis devforum post by Tomarty "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/Getting Started","content":"","keywords":""},{"title":"Using BridgeNet​","type":1,"pageTitle":"Getting Started","url":"docs/Getting Started#using-bridgenet","content":"BridgeNet uses objects known as &quot;bridges&quot;. These objects are the equivelant of RemoteEvents in normal Roblox. They are created as such: init.lua local Bridge = BridgeNet.CreateBridge(&quot;RemoteNameHere&quot;) Bridge:FireAll(&quot;Firing all players&quot;)  All the optimizations are handled for you! These is packaged, sent out with a compressed string ID, and received on the client. "},{"title":"Using the identifier system​","type":1,"pageTitle":"Getting Started","url":"docs/Getting Started#using-the-identifier-system","content":"A common pattern in Roblox are constant strings that are sent over the client/server boundary. These are typically static, and can depict things like action requests, item names, all of that. This library provides an easy system to optimize these: the 3 functions CreateIdentifier, WhatIsThis, and DestroyIdentifier. They are used as such: spellHandler.client.lua local SpellCaster = BridgeNet.CreateBridge(&quot;SpellCaster&quot;) local Fireball = BridgeNet.CreateIdentifier(&quot;Fireball&quot;) SomeUserInputSignalHere:Connect(function() SpellCaster:Fire(Fireball) -- Fires a 1 or 2 character string, much smaller than an 8-character string. end)  "},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/Installation","content":"","keywords":""},{"title":"With Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#with-wally","content":"Install WallyPut BridgeNet in the wally.toml file under [dependencies] wally.toml [dependencies] BridgeNet = ffrostflame/bridgenet@0.1.0  Run wally install "},{"title":"Without Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#without-wally","content":"Get the .rbxm file from the latest release.Sync manually or drop into studio manually "},{"title":"Server-Client Example","type":0,"sectionRef":"#","url":"docs/Server-Client Example","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Server-Client Example","url":"docs/Server-Client Example#server","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) BridgeNet.Start({}) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) while true do Remote:FireAll(&quot;Hello, &quot;, &quot;world!&quot;) -- Fires to everyone Remote:FireTo(game.Players.Someone, &quot;Hello, &quot;, &quot;someone!&quot;) -- Fires to a specific player task.wait(1) end  "},{"title":"Client​","type":1,"pageTitle":"Server-Client Example","url":"docs/Server-Client Example#client","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) BridgeNet.Start({}) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) Remote:Connect(function(stringA, stringB) print(stringA .. stringB) -- Prints -- Hello, world! -- Hello, someone! end)  "}]