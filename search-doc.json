[{"title":"Network","type":0,"sectionRef":"#","url":"api/Network","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Network","url":"api/Network#functions","content":" "},{"title":"CreateBridge​","type":1,"pageTitle":"Network","url":"api/Network#CreateBridge","content":"&lt;/&gt; Network.CreateBridge(remoteName: string) → ServerBridge | ClientBridge Creates a ServerBridge or a ClientBridge depending on if it's the server or client calling. local Bridge = Network.CreateBridge(&quot;Remote&quot;)  "},{"title":"ClientBridge","type":0,"sectionRef":"#","url":"api/ClientBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Fire","content":"&lt;/&gt; ClientBridge:Fire(...: any) → () The equivelant of :FireServer(). local Bridge = ClientBridge.new(&quot;Remote&quot;) Bridge:Fire(&quot;Hello&quot;, &quot;world!&quot;)   "},{"title":"Connect​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Connect","content":"&lt;/&gt; ClientBridge:Connect(func: function) → () Creates a connection. Can be disconnected using :Disconnect(). local Bridge = ClientBridge.new(&quot;Remote&quot;) Bridge:Connect(function(text) print(text) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Destroy","content":"&lt;/&gt; ClientBridge:Destroy() → () Destroys the ClientBridge object. Doesn't destroy the RemoteEvent, or destroy the identifier. It doesn't send anything to the server. Just destroys the client sided object. local Bridge = ClientBridge.new(&quot;Remote&quot;) ClientBridge:Destroy() ClientBridge:Fire() -- Errors  "},{"title":"RateManager","type":0,"sectionRef":"#","url":"api/RateManager","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RateManager","url":"api/RateManager#functions","content":" "},{"title":"SetReceiveRate​","type":1,"pageTitle":"RateManager","url":"api/RateManager#SetReceiveRate","content":"&lt;/&gt; RateManager.SetReceiveRate(rate: number) → nil Sets the rate (in Hz) of which connections are executed RateManager.SetReceiveRate(30) -- Do connections at 30 fps   "},{"title":"SetSendRate​","type":1,"pageTitle":"RateManager","url":"api/RateManager#SetSendRate","content":"&lt;/&gt; RateManager.SetSendRate(rate: number) → nil Sets the rate (in Hz) of which remotes are fired RateManager.SetSendRate(30) -- Do connections at 30 fps  "},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/Installation","content":"","keywords":""},{"title":"With Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#with-wally","content":"Install WallyPut BridgeNet in the wally.toml file under [dependencies] Run wally install "},{"title":"Without Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#without-wally","content":"Get the .rbxm file from the latest release(tbd add link)Sync manually or drop into studio manually "},{"title":"BridgeNet","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#features","content":"A multitude of utility functions such as :FireAllInRange(), :FireAllExcept, and :FireAllInRangeExcept.Directly cutting down the amount of data it takes to call a remote eventEasy-to-use, dynamic serialization/deserialization layerDynamic send/receive ratesDynamically creating RemoteEvents while keeping all the above features "},{"title":"Upcoming features (order = priority)​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#upcoming-features-order--priority","content":"Support for rate limiting and middlewareTypecheckingEasy logging supportRemoteFunction-esque functions (this would support promises)Using attributes instead of value objects "},{"title":"Prior art​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#prior-art","content":"RbxNetThis is a continuation of my previous networking system NetworkObjectThis devforum post by Tomarty "},{"title":"serdeLayer","type":0,"sectionRef":"#","url":"api/serdeLayer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#functions","content":" "},{"title":"WhatIsThis​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#WhatIsThis","content":"&lt;/&gt; serdeLayer.WhatIsThis( str: string, toSend: &quot;id&quot; | &quot;compressed&quot; ) → string? This takes a compressed value and returns the identification related to it, and does the reverse. print(BridgeNet.WhatIsThis(&quot;SomeIdentificationStringHere&quot;)) -- prints the compressed value   "},{"title":"CreateIdentifier​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#CreateIdentifier","content":"&lt;/&gt; serdeLayer.CreateIdentifier(id: string) → nil This creates an identifier and associates it with a compressed value. This is shared between the server and the client. BridgeNet.CreateIdentifier(&quot;Something&quot;) print(BridgeNet.WhatIsThis(&quot;Something&quot;, &quot;compressed&quot;))   "},{"title":"DestroyIdentifier​","type":1,"pageTitle":"serdeLayer","url":"api/serdeLayer#DestroyIdentifier","content":"&lt;/&gt; serdeLayer.DestroyIdentifier(id: string) → nil This creates an identifier and associates it with a compressed value. This is shared between the server and the client. BridgeNet.DestroyIdentifier(&quot;Something&quot;) print(BridgeNet.WhatIsThis(&quot;Something&quot;, &quot;compressed&quot;)) -- Errors  "},{"title":"ServerBridge","type":0,"sectionRef":"#","url":"api/ServerBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#functions","content":" "},{"title":"FireTo​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireTo","content":"&lt;/&gt; ServerBridge:FireTo( plr: Player , ...: ...any ) → nil Sends data to a specific player. local Bridge = Network.CreateBridge(&quot;Remote&quot;) Bridge:FireTo(game.Players.Someone, &quot;Hello&quot;, &quot;World!&quot;)   "},{"title":"FireToAllExcept​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireToAllExcept","content":"&lt;/&gt; ServerBridge:FireToAllExcept( blacklistedPlrs: Player | {Player }, ...: ...any ) → nil Sends data to every player except for one. local Bridge = Network.CreateBridge(&quot;Remote&quot;) Bridge:FireToAllExcept(game.Players.Someone, &quot;Hello&quot;, &quot;World!&quot;) Bridge:FireToAllExcept({game.Players.A, game.Players.B}, &quot;Not to A or B, but to C.&quot;)   "},{"title":"FireAllInRangeExcept​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAllInRangeExcept","content":"&lt;/&gt; ServerBridge:FireAllInRangeExcept( blacklistedPlrs: Player | {Player }, point: Vector3 , range: number, ...: ...any ) → {Player } Sends data to every single player within the range except certain blacklisted players. Returns the players affected, for usage later. local Bridge = Network.CreateBridge(&quot;Remote&quot;) local PlayersSent = Bridge:FireToAllInRangeExcept( game.Players.Someone, Vector3.new(50,50,50), 10, &quot;Hello&quot;, &quot;World!&quot; ) task.wait(5) Bridge:FireToMultiple(PlayersSent, &quot;Time for an update!&quot;)   "},{"title":"FireAllInRange​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAllInRange","content":"&lt;/&gt; ServerBridge:FireAllInRange( point: Vector3 , range: number, ...: ...any ) → {Player } Sends data to every single player within the range. Returns the players affected, for usage later. local Bridge = Network.CreateBridge(&quot;Remote&quot;) local PlayersSent = Bridge:FireAllInRange( Vector3.new(50,50,50), 10, &quot;Hello&quot;, &quot;World!&quot; ) task.wait(5) Bridge:FireToMultiple(PlayersSent, &quot;Time for an update!&quot;)   "},{"title":"FireAll​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAll","content":"&lt;/&gt; ServerBridge:FireAll(...: ...any) → nil Sends data to every single player, with no exceptions. local Bridge = Network.CreateBridge(&quot;Remote&quot;) Bridge:FireAll(&quot;Hello, world!&quot;)   "},{"title":"FireToMultiple​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireToMultiple","content":"&lt;/&gt; ServerBridge:FireToMultiple( plrs: {Player }, ...: ...any ) → nil Sends data to multiple players. local Bridge = Network.CreateBridge(&quot;Remote&quot;) Bridge:FireToMultiple({game.Players.A, game.Players.B}, &quot;Hi!&quot;, &quot;Hello.&quot;)   "},{"title":"Connect​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Connect","content":"&lt;/&gt; ServerBridge:Connect(func: ( plr: Player , ...any ) → nil) → Connection Creates a connection. local Bridge = Network.CreateBridge(&quot;Remote&quot;) Bridge:Connect(function(plr, data) print(plr .. &quot; has sent &quot; .. data) end)   "},{"title":"Destroy​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Destroy","content":"&lt;/&gt; ServerBridge:Destroy() → nil Destroys the identifier, and deletes the object reference. local Bridge = Network.CreateBridge(&quot;Remote&quot;) Bridge:Destroy() Bridge:FireTo(game.Players.A) -- Errors, the object is deleted.  "}]