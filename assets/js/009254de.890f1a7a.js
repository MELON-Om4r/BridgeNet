"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[367],{19979:function(e){e.exports=JSON.parse('{"functions":[{"name":"CreateBridge","desc":"Creates a ServerBridge or a ClientBridge depending on if it\'s the server or client calling.\\n\\n```lua\\nlocal Bridge = BridgeNet.CreateBridge(\\"Remote\\")\\n```","params":[{"name":"remoteName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ServerBridge | ClientBridge"}],"function_type":"static","source":{"line":34,"path":"src/init.lua"}},{"name":"FromBridge","desc":"Fetches a ServerBridge or ClientBridge from the string provided.\\n\\n```lua\\nlocal Bridge = BridgeNet.FromBridge(\\"Remote\\")\\n```","params":[{"name":"remoteName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ServerBridge | ClientBridge | nil"}],"function_type":"static","source":{"line":48,"path":"src/init.lua"}},{"name":"WaitForBridge","desc":"Waits for a BridgeObject to be created, then resumes the thread.\\nThis does NOT replicate. If the server creates a BridgeObject, it will NOT replicate to the client.\\nThis will wait until a BridgeObject is created for the client/server respectively.\\n\\n```lua\\nprint(\\"client is waiting for the bridge to be created on the client..\\")\\nlocal Bridge = BridgeNet.WaitForBridge(\\"Remote\\")\\nprint(\\"client is done waiting! was created in another script.\\")\\n```","params":[],"returns":[{"desc":"","lua_type":"BridgeObject"}],"function_type":"static","source":{"line":65,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"BridgeNet","desc":"The interface for the package.","source":{"line":20,"path":"src/init.lua"}}')}}]);